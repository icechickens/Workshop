digraph "ECSバッチサーバアーキテクチャ" {
    rankdir=LR;
    fontname="sans-serif";
    fontsize=16;
    label="ECSバッチサーバアーキテクチャ";
    
    // ノードのスタイル設定
    node [shape=box, style=filled, fontname="sans-serif", fontsize=12];
    
    // クラスタの設定
    subgraph cluster_aws {
        label="AWS クラウド";
        style=filled;
        color=lightblue;
        
        // イベントとトリガー
        eventbridge [label="EventBridge\nスケジュール", fillcolor="#FF9900"];
        sqs [label="SQS\nジョブキュー", fillcolor="#FF9900"];
        
        subgraph cluster_vpc {
            label="VPC";
            style=filled;
            color=lightgrey;
            
            subgraph cluster_subnet {
                label="プライベートサブネット";
                style=filled;
                color=lightyellow;
                
                subgraph cluster_ecs {
                    label="ECS クラスター";
                    style=filled;
                    color=lightgreen;
                    
                    fargate [label="Fargate", fillcolor="#FF9900"];
                    container1 [label="バッチ処理\nコンテナ1", fillcolor="#FF9900"];
                    container2 [label="バッチ処理\nコンテナ2", fillcolor="#FF9900"];
                    container3 [label="バッチ処理\nコンテナ3", fillcolor="#FF9900"];
                }
                
                rds [label="RDS\nデータベース", fillcolor="#FF9900"];
            }
        }
        
        // ストレージとモニタリング
        s3 [label="S3バケット\n(入出力データ)", fillcolor="#FF9900"];
        cloudwatch [label="CloudWatch\nモニタリング", fillcolor="#FF9900"];
        iam [label="IAM\nロール", fillcolor="#FF9900"];
    }
    
    // 外部ノード
    client [label="クライアント", fillcolor=lightblue];
    
    // 接続関係
    client -> eventbridge [label="バッチ処理\nリクエスト"];
    eventbridge -> sqs [label="スケジュール\nトリガー"];
    sqs -> container1 [label="ジョブ取得"];
    sqs -> container2 [label="ジョブ取得"];
    sqs -> container3 [label="ジョブ取得"];
    
    fargate -> container1 [label="実行環境"];
    fargate -> container2 [label="実行環境"];
    fargate -> container3 [label="実行環境"];
    
    container1 -> s3 [label="データ読み書き"];
    container2 -> s3 [label="データ読み書き"];
    container3 -> s3 [label="データ読み書き"];
    
    container1 -> rds [label="データ処理"];
    container2 -> rds [label="データ処理"];
    container3 -> rds [label="データ処理"];
    
    container1 -> cloudwatch [label="ログ/メトリクス"];
    container2 -> cloudwatch [label="ログ/メトリクス"];
    container3 -> cloudwatch [label="ログ/メトリクス"];
    
    iam -> container1 [label="権限付与"];
    iam -> container2 [label="権限付与"];
    iam -> container3 [label="権限付与"];
}
